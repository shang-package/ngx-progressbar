{"version":3,"file":"ngx-progressbar.umd.min.js","sources":["../../src/services/progress.service.ts","../../src/services/interceptor.provider.ts","../../src/components/progress-bar.component.ts","../../src/components/progress.component.ts","../../src/modules/progress.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\n\nimport'rxjs/add/observable/timer';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/do';\nimport'rxjs/add/operator/takeWhile';\n/**\n * Helper\n */\nconst clamp = (n, min, max) => {\n  if (n < min) {\n    return min;\n  }\n  if (n > max) {\n    return max;\n  }\n  return n;\n};\nexport class NgProgressService {\n/**\n * Progress state\n */\nstate = new Subject();\n/**\n * Trickling stream\n */\ntrickling = new Subject();\n\n  progress = 0;\n  maximum = 1;\n  minimum = 0.08;\n  speed = 200;\n  trickleSpeed = 300;\nprivate pendingProgress = 0;\nconstructor() {\n\n    this.trickling.switchMap(() => {\n      return Observable\n        .timer(0, this.trickleSpeed)\n        .takeWhile(() => this.isStarted())\n        .do(() => this.inc());\n    }).subscribe();\n  }\n/**\n * Start\n * @return {?}\n */\nstart() {\n    if (!this.isStarted()) {\n      this.set(this.minimum);\n    }\n    this.trickling.next();\n  }\n/**\n * Done\n * @return {?}\n */\ndone() {\n    /** if started complete the progress */\n    if (this.isStarted()) {\n      this.set(.3 + .5 * Math.random());\n      this.set(this.maximum);\n    }\n  }\n/**\n * @return {?}\n */\nbegin() {\n    this.pendingProgress++;\n    if (!this.isStarted()) {\n      this.start();\n    } else {\n      this.inc(-this.progress / 0.4);\n    }\n  }\n/**\n * @return {?}\n */\nend() {\n    this.pendingProgress--;\n    if (this.pendingProgress <= 0) {\n      this.done();\n    }\n    else {\n      this.inc((1 - this.progress) / 5);\n    }\n  }\n/**\n * Increment Progress\n * @param {?=} amount\n * @return {?}\n */\ninc(amount?) {\n    let /** @type {?} */ n = this.progress;\n    /** if it hasn't start, start */\n    if (!this.isStarted()) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        if (n >= 0 && n < 0.2) {\n          amount = 0.1;\n        } else if (n >= 0.2 && n < 0.5) {\n          amount = 0.04;\n        } else if (n >= 0.5 && n < 0.8) {\n          amount = 0.02;\n        } else if (n >= 0.8 && n < 0.99) {\n          amount = 0.005;\n        } else {\n          amount = 0;\n        }\n      }\n      n = clamp(n + amount, 0, 0.994);\n      this.set(n);\n    }\n  }\n/**\n * Set progress state\n * @param {?} n\n * @return {?}\n */\nset(n) {\n    this.progress = clamp(n, this.minimum, this.maximum);\n    this.updateState(this.progress, true);\n    /** if progress completed */\n    if (n === this.maximum) {\n      const /** @type {?} */ hide = () => {\n        /**\n         *  reset progress\n         *  Keep it { 0, false } to fadeOut progress-bar after complete\n         */\n        if (this.progress >= this.maximum) {\n          this.progress = 0;\n          this.updateState(this.progress, false);\n        }\n      };\n      const /** @type {?} */ complete = () => {\n        /**\n         * complete progressbar\n         * { 1, false } to complete progress-bar before hiding\n         */\n        if (this.progress >= this.maximum) {\n          this.updateState(this.progress, false);\n          setTimeout(hide, this.speed);\n        }\n      };\n      setTimeout(complete, this.speed);\n    }\n  }\n/**\n * Is progress started\n * @return {?}\n */\nisStarted(): boolean {\n    return this.progress > 0 && this.progress < this.maximum;\n  }\n/**\n * Update Progressbar State\n * @param {?} progress\n * @param {?} isActive\n * @return {?}\n */\nprivate updateState(progress, isActive) {\n    this.state.next({\n      active: isActive,\n      value: progress\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgProgressService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressService.ctorParameters;\n/**\n * Progress state\n * @type {?}\n */\nNgProgressService.prototype.state;\n/**\n * Trickling stream\n * @type {?}\n */\nNgProgressService.prototype.trickling;\n/** @type {?} */\nNgProgressService.prototype.progress;\n/** @type {?} */\nNgProgressService.prototype.maximum;\n/** @type {?} */\nNgProgressService.prototype.minimum;\n/** @type {?} */\nNgProgressService.prototype.speed;\n/** @type {?} */\nNgProgressService.prototype.trickleSpeed;\n/** @type {?} */\nNgProgressService.prototype.pendingProgress;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { NgProgressService } from './progress.service';\nimport'rxjs/add/operator/finally';\nexport class NgProgressInterceptor implements HttpInterceptor {\n/**\n * @param {?} progressService\n */\nconstructor(public progressService: NgProgressService) {\n  }\n/**\n * @param {?} req\n * @param {?} next\n * @return {?}\n */\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.progressService.begin();\n    return next.handle(req).finally(() => {\n      this.progressService.end();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgProgressService, },\n];\n}\n\nfunction NgProgressInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressInterceptor.ctorParameters;\n/** @type {?} */\nNgProgressInterceptor.prototype.progressService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nexport class ProgressBarComponent {\n\n   state;\n   positionUsing;\n   ease;\n   speed;\n   showSpinner;\n   direction;\n   thick;\n   color;\n/**\n * Styles for progressbar\n * @return {?}\n */\nbarStyles() {\n    let /** @type {?} */ styles = {\n      transition: `all ${this.speed}ms ${this.ease}`,\n      backgroundColor: this.color\n    };\n/**\n * Get positioning value\n */\nconst n = (!this.state.value) ? {\n      leftToRightIncreased: -100,\n      leftToRightReduced: 0,\n      rightToLeftIncreased: 100,\n      rightToLeftReduced: 0\n    }[this.direction] : this.toPercentage(this.state.value);\n\n    switch (this.positionUsing) {\n      case 'translate3d':\n        styles = Object.assign({}, styles, {\n          transform: `translate3d(${n}%,0,0)`,\n          '-webkit-transform': `translate3d(${n}%,0,0)`,\n          '-moz-transform': `translate3d(${n}%,0,0)`,\n          '-o-transform': `translate3d(${n}%,0,0)`,\n          '-ms-transform': `translate3d(${n}%,0,0)`\n        });\n        break;\n      case 'translate':\n        styles = Object.assign({}, styles, {\n          transform: `translate(${n}%,0)`,\n          '-webkit-transform': `translate(${n}%,0)`,\n          '-moz-transform': `translate(${n}%,0)`,\n          '-o-transform': `translate(${n}%,0)`,\n          '-ms-transform': `translate(${n}%,0)`\n        });\n        break;\n      default:\n        styles = Object.assign({}, styles, {\n          marginLeft: `${n}%`\n        });\n    }\n    return styles;\n  }\n/**\n * Styles for progressbar tail\n * @return {?}\n */\nshadowStyles() {\n    return {\n      boxShadow: `0 0 10px ${this.color}, 0 0 5px ${this.color}`\n    };\n  }\n/**\n * @param {?} n\n * @return {?}\n */\ntoPercentage(n) {\n    return ({\n      leftToRightIncreased: -1 + n,\n      leftToRightReduced: -n,\n      rightToLeftIncreased: 1 - n,\n      rightToLeftReduced: n\n    }[this.direction]) * 100;\n  }\n/**\n * @return {?}\n */\nspinnerClasses() {\n    return {\n      leftToRightIncreased: 'clockwise',\n      leftToRightReduced: 'anti-clockwise',\n      rightToLeftIncreased: 'anti-clockwise',\n      rightToLeftReduced: 'clockwise'\n    }[this.direction];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-progress-bar',\n  template: `\n  <div class=\"ng-progress\" *ngIf=\"state\" [class.active]=\"state.active\" [class.thick]=\"thick\">\n    <div class=\"bar\" [ngStyle]=\"barStyles()\">\n      <div class=\"bar-shadow\" [ngStyle]=\"shadowStyles()\"></div>\n    </div>\n    <div *ngIf=\"showSpinner\" class=\"spinner\" [ngClass]=\"spinnerClasses()\">\n      <div class=\"spinner-icon\" [style.borderTopColor]=\"color\" [style.borderLeftColor]=\"color\"></div>\n    </div>\n  </div>`,\n  styles: [`\n  .ng-progress {\n    z-index: 999999;\n    top: 0;\n    left: 0;\n    width: 100%;\n    position: fixed;\n    zoom: 1;\n    filter: alpha(opacity=0);\n    opacity: 0;\n    transition: opacity 200ms linear;\n  }\n\n  .active {\n    filter: alpha(opacity=100);\n    opacity: 1;\n    transition: none;\n  }\n\n  .bar {\n    position: absolute;\n    width: 100%;\n    height: 2px;\n  }\n\n  .thick .bar {\n    height: 3px;\n  }\n\n  .bar-shadow {\n    display: block;\n    position: absolute;\n    right: 0;\n    top: -3px;\n    width: 100px;\n    height: 100%;\n    opacity: 1.0;\n    -webkit-transform: rotate(3deg);\n    -ms-transform: rotate(3deg);\n    -moz-transform: rotate(3deg);\n    transform: rotate(3deg);\n  }\n\n\n  .thick .bar-shadow {\n    top: -4px;\n    -webkit-transform: rotate(4deg);\n    -ms-transform: rotate(4deg);\n    -moz-transform: rotate(4deg);\n    transform: rotate(4deg);\n  }\n\n  .thick .spinner-icon {\n    width: 24px;\n    height: 24px;\n    border: solid 3px transparent;\n  }\n\n  /* Remove these to get rid of the spinner */\n  .spinner {\n    display: block;\n    position: fixed;\n    z-index: 1031;\n    top: 15px;\n    right: 15px;\n  }\n\n  .spinner-icon {\n    width: 18px;\n    height: 18px;\n    box-sizing: border-box;\n\n    border: solid 2px transparent;\n    border-radius: 50%;\n\n    -webkit-animation: nprogress-spinner 400ms linear infinite;\n    -moz-animation: nprogress-spinner 400ms linear infinite;\n    animation: nprogress-spinner 400ms linear infinite;\n  }\n\n  .anti-clockwise .spinner-icon {\n    -webkit-animation-direction: reverse;\n    -moz-animation-direction: rotate(0deg);\n    animation-direction: reverse;\n  }\n\n  @-webkit-keyframes nprogress-spinner {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n\n  @keyframes nprogress-spinner {\n    0% {\n      -webkit-transform: rotate(0deg);\n      -moz-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n      -moz-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'positionUsing': [{ type: Input },],\n'ease': [{ type: Input },],\n'speed': [{ type: Input },],\n'showSpinner': [{ type: Input },],\n'direction': [{ type: Input },],\n'thick': [{ type: Input },],\n'color': [{ type: Input },],\n};\n}\n\nfunction ProgressBarComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressBarComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressBarComponent.ctorParameters;\n/** @type {?} */\nProgressBarComponent.propDecorators;\n/** @type {?} */\nProgressBarComponent.prototype.state;\n/** @type {?} */\nProgressBarComponent.prototype.positionUsing;\n/** @type {?} */\nProgressBarComponent.prototype.ease;\n/** @type {?} */\nProgressBarComponent.prototype.speed;\n/** @type {?} */\nProgressBarComponent.prototype.showSpinner;\n/** @type {?} */\nProgressBarComponent.prototype.direction;\n/** @type {?} */\nProgressBarComponent.prototype.thick;\n/** @type {?} */\nProgressBarComponent.prototype.color;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges, OnDestroy\n} from '@angular/core';\nimport { NgProgressService } from '../services/progress.service';\nexport class ProgressComponent implements OnChanges, OnDestroy {\n/**\n * Progress options\n */\nease = 'linear';\n   positionUsing = 'margin';\n   showSpinner = true;\n   direction = 'leftToRightIncreased';\n   color = '#CC181E';\n   thick = false;\n   maximum = 1;\n   minimum = 0.08;\n   speed = 200;\n   trickleSpeed = 300;\n/**\n * Start/Stop Progressbar\n */\ntoggle;\n/**\n * @param {?} progress\n */\nconstructor(public progress: NgProgressService) {\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n\n    const /** @type {?} */ minChng = changes.minimum;\n    const /** @type {?} */ maxChng = changes.maximum;\n    const /** @type {?} */ spdChng = changes.speed;\n    const /** @type {?} */ tklSpdChng = changes.trickleSpeed;\n    const /** @type {?} */ tglChng = changes.toggle;\n\n    if (minChng) {\n      if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\n        if (minChng.currentValue < 0 || minChng.currentValue > 1) {\n          throw 'Input [minimum] must be between 0 and 1';\n        } else {\n          this.progress.minimum = minChng.currentValue;\n        }\n      }\n    }\n\n    if (maxChng) {\n      if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\n        if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\n          throw 'Input [maximum] must be between 0 and 1';\n        } else {\n          this.progress.maximum = maxChng.currentValue;\n        }\n      }\n    }\n\n    if (spdChng) {\n      if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\n        this.progress.speed = spdChng.currentValue;\n      }\n    }\n\n    if (tklSpdChng) {\n      if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\n        this.progress.trickleSpeed = tklSpdChng.currentValue;\n      }\n    }\n\n    if (tglChng) {\n      if (typeof tglChng.currentValue !== 'undefined' && tglChng.currentValue !== tglChng.previousValue) {\n        if (tglChng.currentValue) {\n          this.progress.start();\n        } else {\n          this.progress.done();\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.progress.state.unsubscribe();\n    this.progress.trickling.unsubscribe();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-progress',\n  template: `\n  <ng-progress-bar\n    [speed]=\"speed\"\n    [positionUsing]=\"positionUsing\"\n    [ease]=\"ease\"\n    [showSpinner]=\"showSpinner\"\n    [direction]=\"direction\"\n    [color]=\"color\"\n    [thick]=\"thick\"\n    [state]=\"progress.state | async\"\n  ></ng-progress-bar>`,\n  styles: [`\n  :host {\n    z-index: 999999;\n    pointer-events: none;\n    position: relative;\n  }`],\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgProgressService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ease': [{ type: Input },],\n'positionUsing': [{ type: Input },],\n'showSpinner': [{ type: Input },],\n'direction': [{ type: Input },],\n'color': [{ type: Input },],\n'thick': [{ type: Input },],\n'maximum': [{ type: Input },],\n'minimum': [{ type: Input },],\n'speed': [{ type: Input },],\n'trickleSpeed': [{ type: Input },],\n'toggle': [{ type: Input },],\n};\n}\n\nfunction ProgressComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProgressComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProgressComponent.ctorParameters;\n/** @type {?} */\nProgressComponent.propDecorators;\n/**\n * Progress options\n * @type {?}\n */\nProgressComponent.prototype.ease;\n/** @type {?} */\nProgressComponent.prototype.positionUsing;\n/** @type {?} */\nProgressComponent.prototype.showSpinner;\n/** @type {?} */\nProgressComponent.prototype.direction;\n/** @type {?} */\nProgressComponent.prototype.color;\n/** @type {?} */\nProgressComponent.prototype.thick;\n/** @type {?} */\nProgressComponent.prototype.maximum;\n/** @type {?} */\nProgressComponent.prototype.minimum;\n/** @type {?} */\nProgressComponent.prototype.speed;\n/** @type {?} */\nProgressComponent.prototype.trickleSpeed;\n/**\n * Start/Stop Progressbar\n * @type {?}\n */\nProgressComponent.prototype.toggle;\n/** @type {?} */\nProgressComponent.prototype.progress;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ProgressBarComponent } from '../components/progress-bar.component';\nimport { ProgressComponent } from '../components/progress.component';\nimport { NgProgressService } from '../services/progress.service';\nexport class NgProgressModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    ProgressComponent,\n    ProgressBarComponent\n  ],\n  exports: [\n    ProgressComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NgProgressService\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgProgressModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProgressModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgProgressModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["clamp","n","min","max","NgProgressService","_this","this","state","Subject","trickling","progress","maximum","minimum","speed","trickleSpeed","pendingProgress","switchMap","Observable","timer","takeWhile","isStarted","do","inc","subscribe","prototype","start","set","next","done","Math","random","begin","end","amount","updateState","hide_1","complete","setTimeout","isActive","active","value","decorators","type","Injectable","ctorParameters","NgProgressInterceptor","progressService","intercept","req","handle","finally","ProgressBarComponent","barStyles","styles","transition","ease","backgroundColor","color","toPercentage","leftToRightIncreased","leftToRightReduced","rightToLeftIncreased","rightToLeftReduced","direction","positionUsing","Object","assign","transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform","marginLeft","shadowStyles","boxShadow","spinnerClasses","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","Input","showSpinner","thick","ProgressComponent","ngOnChanges","changes","minChng","maxChng","spdChng","tklSpdChng","tglChng","toggle","currentValue","previousValue","ngOnDestroy","unsubscribe","NgProgressModule","NgModule","declarations","exports","imports","CommonModule","providers"],"mappings":"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"}